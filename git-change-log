#!/usr/bin/env python

"""
Tools Project
Copyright(c) 2017 Tools

This program is free software; you can redistribute it and/or modify it
under the terms and conditions of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.

The full GNU General Public License is included in this distribution in
the file called "COPYING".

Contact Information (Author):
	Kamal Heib <kamalheib1@gmail.com>

Modified by:
	Alaa Hleihel <alaa.hl2@gmail.com>
"""

import os
import subprocess
import re
import sys
from argparse import ArgumentParser

try:
    from git import Repo
except ImportError:
    print("Please Install GitPython Package (e.g. yum install GitPython)")
    sys.exit(1)

SEARCH_PATHS = {
    'ib_core': [
        'include/rdma/',
        'drivers/infiniband/core/',
        'drivers/infiniband/ulp/ipoib'
        'include/uapi/rdma/ib_user_verbs.h',
    ],

    'mlx4': [
        'Documentation/networking/devlink/mlx4.rst',
        'drivers/infiniband/hw/mlx4/',
        'drivers/net/ethernet/mellanox/mlx4/',
        'drivers/net/mlx4/',
        'include/linux/mlx4/',
    ],

    'mlx5': [
        'Documentation/networking/device_drivers/ethernet/mellanox/mlx5/',
        'Documentation/networking/devlink/mlx5.rst',
        'drivers/infiniband/hw/mlx5/',
        'drivers/net/ethernet/mellanox/Kconfig',
        'drivers/net/ethernet/mellanox/Makefile',
        'drivers/net/ethernet/mellanox/mlx5/',
        'drivers/net/mlx5/',
        'include/linux/mlx5/',
        'include/linux/net_dim.h',
    ],

    'mlx5_vdpa': [
        'drivers/vdpa/mlx5/',
    ],

    'srp': [
        'drivers/infiniband/ulp/srp/',
        'include/scsi/srp.h',
    ],

    'rxe': [
        'drivers/infiniband/sw/rxe/',
        'include/uapi/rdma/rdma_user_rxe.h'
    ],

    'mlxfw': [
        'drivers/net/ethernet/mellanox/mlxfw/',
    ],

    'gpio-mlxbf': [
        'drivers/gpio/gpio-mlxbf.c',
    ],

    'tmfifo': [
        'drivers/platform/mellanox/mlxbf-tmfifo-regs.h',
	'drivers/platform/mellanox/mlxbf-tmfifo.c',
    ],

    'ipmb-dev-int': [
        'drivers/char/ipmi/ipmb_dev_int.c',
    ],

    'edac': [
        'drivers/edac/bluefield_edac.c',
    ],

    'mlx-bootctl': [
        'drivers/platform/mellanox/mlxbf-bootctl.c',
        'drivers/platform/mellanox/mlxbf-bootctl.h',
    ],

    'mm': [
        'include/linux/percpu.h',
        'mm/percpu-internal.h',
        'mm/percpu-km.c',
        'mm/percpu-stats.c',
        'mm/percpu.c',
    ],
}

PICK_RGEX_LIST = [
    "cherry picked from commit ([0-9a-f]+)",
    "Cherry picked from commit ([0-9a-f]+)",
    "cherry picked from ([0-9a-f]+)",
    "Cherry picked from ([0-9a-f]+)",
    "upstream commit: ([0-9a-f]+)",
    "Upstream commit: ([0-9a-f]+)",
    "upstream commit ([0-9a-f]+)",
    "Upstream commit ([0-9a-f]+)",
    "upstream: ([0-9a-f]+)",
    "Upstream: ([0-9a-f]+)",
    "commit ([0-9a-f]{40})",
    "commit ([0-9a-f]+)",
    "Commit ([0-9a-f]+)"
]

IGNORE_COMMITS = [
    'abde0260e47b1d285739c7156f5c1167fad3feff',
    'c4b916c574437767454abba0fa4ad2bca503c418',
    'a2ef27b04708',
    'c5c4e40e90b5c714248bcf4e8a63b1a1cd07c11e',
    'a3263005fb07e9e0caa3c894adf3b328925b38a9',
    'a5ff426e4c07c5248e1065f57cc3a369457f2724',
    'e31e6693aef1',
]

IGNORE_UPSTREAM_COMMITS = [
]

STABLE_REGEX = r"\[ Upstream commit ([0-9a-f]+) \]"

FIXES_RGEX_LIST = [
    "Fixes: ([0-9a-f]+)",
]


class git_change_log(object):
    def get_parser(self):
        if not hasattr(self, 'parser'):
            self.parser = ArgumentParser()
        return self.parser

    def parse_args(self, args):
        self.Parser.add_argument('-o', '--old_range', help='Old kernel range of commits', required=True)
        self.Parser.add_argument('-u', '--upstream_range', help='Upstream kernel range of commits', required=True)
        self.Parser.add_argument('--old_kernel_path', help='Path to old kernel tree', required=True)
        self.Parser.add_argument('--upstream_kernel_path', help='Path to upsream kernel tree', required=True)
        self.Parser.add_argument('--dirs', help='list of directorys to search for changes',
                                 nargs='+',
                                 choices=['mlx4', 'mlx5', 'ib_core', 'rxe', 'mlxfw', 'mm'],
                                 default=['mlx4', 'mlx5', 'ib_core', 'rxe', 'mlxfw'])
        self.Parser.add_argument('--get_fixes', help='Get only patches that has a Fixes tag in the commit message', action='store_true')
        self.Parser.add_argument('--debug', help="enable debug prints", action="store_true")

        self.Parser.parse_args(namespace=self, args=args)

    def get_old_repo(self):
        if not hasattr(self, 'old_repo'):
            self.old_repo = Repo(self.old_kernel_path)
        return self.old_repo

    def get_upstream_repo(self):
        if not hasattr(self, 'upstream_repo'):
            self.upstream_repo = Repo(self.upstream_kernel_path)
        return self.upstream_repo

    def get_included_commits(self):
        if not hasattr(self, 'included_commits_set'):
            self.included_commits_set = set()

            for commit in self.OldRepo.iter_commits(self.old_range):
                match = None
                for regex in PICK_RGEX_LIST:
                    match = re.search(regex, commit.message)
                    if match:
                        break

                if match:
                    if self.debug:
                        print(f"Found included: {commit} backports {match.group(1)}")
                    ignore = False
                    for msg in IGNORE_COMMITS:
                        if msg in commit.message:
                            ignore = True
                            break

                    if ignore:
                        continue

                    # save current commit info
                    upstream_commit = None
                    try:
                            upstream_commit = self.UpstreamRepo.commit(match.group(1))
                    except Exception:
                            #print "# Failed to locate this commit in upstream repo:", match.group(1)
                            continue
                    self.included_commits_set.add(upstream_commit.hexsha)
                else:
                    if self.debug:
                        print("Not found:", commit)


        return self.included_commits_set

    def get_upstream_commits(self):
        if not hasattr(self, 'upstream_commits_set'):
            self.upstream_commits_set = set()

            for commit in self.UpstreamRepo.iter_commits(self.upstream_range, paths=self.MLX_PATHS, no_merges=True):
                ignore = False
                for ignore_commit in IGNORE_UPSTREAM_COMMITS:
                    if ignore_commit in commit.summary:
                        ignore = True
                        break
                if ignore:
                    continue

                if self.get_fixes:
                    match = None
                    for regx in FIXES_RGEX_LIST:
                        match = re.search(regx, commit.message, re.IGNORECASE)
                        if match:
                            break

                    # check if it has fix work in commit subject, for these we
                    # will need to manually check if they are applicable or not
                    if not match:
                        match = re.search("fix", commit.summary, re.IGNORECASE)

                    # check if it has Revert work in commit subject, for these we
                    # will need to manually check if they are applicable or not
                    if not match:
                        match = re.search("Revert", commit.summary, re.IGNORECASE)

                    if not match:
                        continue

                self.upstream_commits_set.add(commit.hexsha)
                if self.debug:
                    print("Found upstream:", commit.hexsha)

        return self.upstream_commits_set

    def get_not_included_commits(self):

        not_included_commits = self.UpstreamCommits - self.IncludedCommits
        old_kernel_curr_branch = self.OldRepo.active_branch
        print("# old_kernel_curr_branch: ", old_kernel_curr_branch)

        for commit in self.UpstreamRepo.iter_commits(self.upstream_range, paths=self.MLX_PATHS, no_merges=True,
                                                     reverse=True):
            commit_hash = commit.hexsha

            skip = False
            note = None
            if self.get_fixes:
                match = None
                for regx in FIXES_RGEX_LIST:
                    match = re.search(regx, commit.message, re.IGNORECASE)
                    if match:
                        try:
                            offending_commit = self.UpstreamRepo.commit(match.group(1))

                            # Check if it's part of current branch
                            found_offending_in_git_log = False
                            try:
                                # this will get confused if we have alternate objects to upstream kerenl git
                                #tmp = self.OldRepo.commit(offending_commit)

                                FNULL = open(os.devnull, 'w')
                                tcmd = "cd %s && git branch --contains %s | grep -w %s" % (self.old_kernel_path, offending_commit, old_kernel_curr_branch)
                                tmp_proc = subprocess.Popen(tcmd, shell=True, stdout=FNULL, stderr=FNULL, close_fds=True)
                                tmp = tmp_proc.communicate()[0]
                                if (tmp_proc.returncode == 0):
                                        found_offending_in_git_log = True
                            except Exception as ex:
                                print(ex)
                                pass
                            if found_offending_in_git_log:
                                    break

                            # Check in backported commits
                            if not (offending_commit.hexsha in self.IncludedCommits):
                                    #print "# offending commit missing in my tree: ", offending_commit.hexsha, offending_commit.summary
                                    skip = True
                                    break
                        except Exception:
                            # someone added bad hash for the offending commit, display it anyway
                            #note = "# Note: might be not relevant: bad offending hash: ", offending_commit.hexsha, offending_commit.summary
                            skip = True
                            #pass
                if not match:
                    # this is probably a fix without fixes tag, show it anyway
                    # for manual check
                    note = "# Note: might be not relevant: No fixes tag, found by fix or Revert keywords"
                    skip = False

            if skip:
                continue

            if commit_hash in not_included_commits:
                msg = "%s # %s" % (commit_hash, commit.summary)

                for c_f in commit.stats.files:
                    found = False
                    for f in self.MLX_PATHS:
                        if f in str(c_f):
                            found = True
                            break

                    if not found:
                        msg = "%s # GENERIC %s" % (commit_hash, commit.summary)
                        break

                if note is not None:
                    print(note)

                print(msg)

    def build_mlx_paths(self):
        self.MLX_PATHS = []
        for directory in self.dirs:
            self.MLX_PATHS += SEARCH_PATHS[directory]

    def execute(self, args):
        self.parse_args(args)
        self.build_mlx_paths()

        self.get_not_included_commits()

    Parser = property(get_parser)
    OldRepo = property(get_old_repo)
    UpstreamRepo = property(get_upstream_repo)
    IncludedCommits = property(get_included_commits)
    UpstreamCommits = property(get_upstream_commits)


if __name__ == '__main__':
    change_log = git_change_log()
    change_log.execute(sys.argv[1:])
